{
  "Vite Index HTML": {
    "prefix": "vitehtml",
    "body": [
      "<!doctype html>",
      "<html lang=\"en\">",
      "<head>",
      "  <meta charset=\"utf-8\" />",
      "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
      "  <title>${1:Vite App}</title>",
      "</head>",
      "<body>",
      "  <div id=\"app\"></div>",
      "  <script type=\"module\" src=\"./main.js\"></script>",
      "</body>",
      "</html>",
    ],
    "description": "Vite index.html starter",
  },
  "JavaScript Component": {
    "prefix": "jscomp",
    "body": [
      "/**",
      " * ${1:ComponentName} Component",
      " * @param {Object} props - Component properties",
      " * @returns {HTMLElement} - Component element",
      " */",
      "export function ${1:ComponentName}(props = {}) {",
      "  const element = document.createElement('${2:div}');",
      "  element.className = '${3:component-class}';",
      "  ",
      "  // Component logic here",
      "  element.innerHTML = \\`",
      "    <h2>\\${props.title || '${1:ComponentName}'}</h2>",
      "    <p>\\${props.content || 'Component content'}</p>",
      "  \\`;",
      "  ",
      "  return element;",
      "}",
    ],
    "description": "JavaScript component template",
  },
  "JavaScript Module": {
    "prefix": "jsmodule",
    "body": [
      "/**",
      " * ${1:ModuleName} Module",
      " * @description ${2:Module description}",
      " */",
      "",
      "// Private variables",
      "let ${3:privateVar} = null;",
      "",
      "/**",
      " * Initialize the module",
      " */",
      "function init() {",
      "  console.log('${1:ModuleName} module initialized');",
      "}",
      "",
      "/**",
      " * ${4:Public function description}",
      " * @param {${5:type}} ${6:param} - ${7:Parameter description}",
      " * @returns {${8:type}} - ${9:Return description}",
      " */",
      "export function ${10:functionName}(${6:param}) {",
      "  // Function implementation",
      "  return ${6:param};",
      "}",
      "",
      "// Auto-initialize if needed",
      "if (typeof window !== 'undefined') {",
      "  init();",
      "}",
    ],
    "description": "JavaScript module template",
  },
  "Vitest Test": {
    "prefix": "vitest",
    "body": [
      "import { describe, it, expect, beforeEach, afterEach } from 'vitest';",
      "import { ${1:functionName} } from '../src/${2:module-path}';",
      "",
      "describe('${1:functionName}', () => {",
      "  beforeEach(() => {",
      "    // Setup before each test",
      "  });",
      "",
      "  afterEach(() => {",
      "    // Cleanup after each test",
      "  });",
      "",
      "  it('should ${3:test description}', () => {",
      "    // Arrange",
      "    const ${4:input} = ${5:testValue};",
      "    const expected = ${6:expectedValue};",
      "",
      "    // Act",
      "    const result = ${1:functionName}(${4:input});",
      "",
      "    // Assert",
      "    expect(result).toBe(expected);",
      "  });",
      "",
      "  it('should handle edge cases', () => {",
      "    expect(() => ${1:functionName}(null)).toThrow();",
      "    expect(${1:functionName}('')).toBe('');",
      "  });",
      "});",
    ],
    "description": "Vitest test template",
  },
  "DOM Event Handler": {
    "prefix": "domevent",
    "body": [
      "/**",
      " * Handle ${1:event} event",
      " * @param {Event} event - The DOM event",
      " */",
      "function handle${1/(.*)/${1:/capitalize}/}(event) {",
      "  event.preventDefault();",
      "  ",
      "  const target = event.target;",
      "  const ${2:data} = target.dataset.${3:attribute};",
      "  ",
      "  // Event handling logic",
      "  console.log('${1:event} triggered:', ${2:data});",
      "}",
      "",
      "// Add event listener",
      "document.addEventListener('${1:event}', handle${1/(.*)/${1:/capitalize}/});",
    ],
    "description": "DOM event handler template",
  },
  "Fetch API Call": {
    "prefix": "fetchapi",
    "body": [
      "/**",
      " * Fetch data from API",
      " * @param {string} ${1:endpoint} - API endpoint",
      " * @param {Object} options - Fetch options",
      " * @returns {Promise<any>} - API response",
      " */",
      "export async function ${2:fetchData}(${1:endpoint}, options = {}) {",
      "  try {",
      "    const response = await fetch(${1:endpoint}, {",
      "      method: '${3:GET}',",
      "      headers: {",
      "        'Content-Type': 'application/json',",
      "        ...options.headers",
      "      },",
      "      ...options",
      "    });",
      "",
      "    if (!response.ok) {",
      "      throw new Error(\\`HTTP error! status: \\${response.status}\\`);",
      "    }",
      "",
      "    const data = await response.json();",
      "    return data;",
      "  } catch (error) {",
      "    console.error('Fetch error:', error);",
      "    throw error;",
      "  }",
      "}",
    ],
    "description": "Fetch API call template",
  },
  "CSS Custom Properties": {
    "prefix": "csscustom",
    "body": [
      ":root {",
      "  /* ${1:Category} Variables */",
      "  --${2:property-name}: ${3:value};",
      "  --${4:color-primary}: #${5:3498db};",
      "  --${6:font-size-base}: ${7:1rem};",
      "  --${8:spacing-unit}: ${9:0.5rem};",
      "}",
      "",
      ".${10:class-name} {",
      "  ${11:property}: var(--${2:property-name});",
      "  color: var(--${4:color-primary});",
      "  font-size: var(--${6:font-size-base});",
      "  margin: var(--${8:spacing-unit});",
      "}",
    ],
    "description": "CSS custom properties template",
  },
  "Console Debug": {
    "prefix": "cdebug",
    "body": [
      "console.group('üêõ ${1:Debug Group}');",
      "console.log('üìä Data:', ${2:data});",
      "console.log('üîß Config:', ${3:config});",
      "console.table(${4:tableData});",
      "console.time('‚è±Ô∏è ${5:Operation}');",
      "// Your code here",
      "console.timeEnd('‚è±Ô∏è ${5:Operation}');",
      "console.groupEnd();",
    ],
    "description": "Console debug template",
  },
  "Error Handler": {
    "prefix": "errorhandler",
    "body": [
      "/**",
      " * Handle ${1:operation} error",
      " * @param {Error} error - The error object",
      " * @param {string} context - Error context",
      " */",
      "function handle${1/(.*)/${1:/capitalize}/}Error(error, context = '${1:operation}') {",
      "  console.error(\\`‚ùå Error in \\${context}:\\`, error);",
      "  ",
      "  // Log error details",
      "  if (error.stack) {",
      "    console.error('üìç Stack trace:', error.stack);",
      "  }",
      "  ",
      "  // User notification",
      "  const message = error.message || 'An unexpected error occurred';",
      "  ${2:showNotification}(\\`Error: \\${message}\\`, 'error');",
      "  ",
      "  // Optional error reporting",
      "  if (typeof ${3:reportError} === 'function') {",
      "    ${3:reportError}(error, context);",
      "  }",
      "}",
    ],
    "description": "Error handler template",
  },
  "Local Storage Helper": {
    "prefix": "localstorage",
    "body": [
      "/**",
      " * Local Storage Helper for ${1:data}",
      " */",
      "export const ${2:storageHelper} = {",
      "  key: '${3:app-data}',",
      "  ",
      "  /**",
      "   * Save data to localStorage",
      "   * @param {any} data - Data to save",
      "   */",
      "  save(data) {",
      "    try {",
      "      localStorage.setItem(this.key, JSON.stringify(data));",
      "    } catch (error) {",
      "      console.error('Failed to save to localStorage:', error);",
      "    }",
      "  },",
      "  ",
      "  /**",
      "   * Load data from localStorage",
      "   * @returns {any} - Saved data or null",
      "   */",
      "  load() {",
      "    try {",
      "      const data = localStorage.getItem(this.key);",
      "      return data ? JSON.parse(data) : null;",
      "    } catch (error) {",
      "      console.error('Failed to load from localStorage:', error);",
      "      return null;",
      "    }",
      "  },",
      "  ",
      "  /**",
      "   * Remove data from localStorage",
      "   */",
      "  remove() {",
      "    localStorage.removeItem(this.key);",
      "  }",
      "};",
    ],
    "description": "Local storage helper template",
  },
}

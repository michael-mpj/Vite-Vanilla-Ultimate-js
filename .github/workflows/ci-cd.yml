name: 🚀 CD - Deploy & Release

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ['🧪 CI - Quality & Testing']
    types:
      - completed
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # 🔧 Auto-maintenance
  auto-maintenance:
    name: 🔧 Auto Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    outputs:
      changes-made: ${{ steps.changes.outputs.changes-made }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.0.0'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔄 Check for dependency updates
        id: deps-check
        run: |
          npm run update-deps:check > dependency-updates.txt 2>&1 || true
          if grep -q "All dependencies match the latest package versions" dependency-updates.txt; then
            echo "has-updates=false" >> $GITHUB_OUTPUT
          else
            echo "has-updates=true" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Update dependencies
        if: steps.deps-check.outputs.has-updates == 'true'
        run: npm run update-deps

      - name: 🔧 Auto-fix code issues
        run: npm run fix

      - name: 🧪 Verify fixes with tests
        run: npm run test:run

      - name: 📝 Commit auto-fixes
        id: changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "chore: auto-maintenance - update dependencies and fix code issues

            - Updated dependencies to latest versions
            - Fixed formatting and linting issues
            - Verified all tests pass

            Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
            git push
            echo "changes-made=true" >> $GITHUB_OUTPUT
          else
            echo "changes-made=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          fi

  # 🏗️ Build for deployment
  build-deploy:
    name: 🏗️ Build for Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: auto-maintenance
    if: always() && (needs.auto-maintenance.result == 'success' || needs.auto-maintenance.result == 'skipped')

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we get the latest after auto-maintenance

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.0.0'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run final tests
        run: npm run test:run

      - name: 🏗️ Build application
        run: npm run build

      - name: 📖 Build documentation
        run: npm run docs:build

      - name: 📦 Upload production build
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: dist/
          retention-days: 30

      - name: 📦 Upload documentation build
        uses: actions/upload-artifact@v3
        with:
          name: documentation-build
          path: docs-site/.vitepress/dist/
          retention-days: 30

  # 🚀 Deploy to Vercel
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-deploy
    if: success()

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: dist/

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
        continue-on-error: true

      - name: 📝 Comment deployment URL
        if: steps.deploy.outputs.preview-url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';
            console.log(`🚀 Deployed to: ${deploymentUrl}`);

  # 📚 Deploy Documentation
  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: build-deploy
    if: success()

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Download docs artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: docs/

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ✅ Deployment Complete
  deploy-complete:
    name: ✅ Deployment Complete
    runs-on: ubuntu-latest
    needs: [auto-maintenance, build-deploy, deploy-vercel, deploy-docs]
    if: always()

    steps:
      - name: 📊 Check deployment status
        run: |
          echo "🔧 Auto Maintenance: ${{ needs.auto-maintenance.result }}"
          echo "🏗️ Build: ${{ needs.build-deploy.result }}"
          echo "🚀 Vercel Deploy: ${{ needs.deploy-vercel.result }}"
          echo "📚 Docs Deploy: ${{ needs.deploy-docs.result }}"

          if [[ "${{ needs.build-deploy.result }}" == "failure" ]]; then
            echo "❌ Critical: Build failed"
            exit 1
          elif [[ "${{ needs.deploy-vercel.result }}" == "failure" && "${{ needs.deploy-docs.result }}" == "failure" ]]; then
            echo "⚠️ Warning: Both deployments failed"
            exit 1
          else
            echo "✅ Deployment pipeline completed successfully"
          fi
